SYMBOLS {
	__LOADADDR__:  type = import;
	__EXEHDR__:	   type = import;
	__STACKSIZE__: type = weak,	  value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $D000;
}
MEMORY {
	ZP:		  file = "", define = yes, start = $0002, size = $001A;
	LOADADDR: file = %O,			   start = $07ff, size = $0002;
	HEADER:	  file = %O,			   start = $0801, size = $000C;
	RAM1:	  file = %O, 			   start = $080d, size = $63f3;
	RAM:	  file = %O, define = yes, start = $8000, size = $4fff - __STACKSIZE__;
}
SEGMENTS {
	ZEROPAGE: load = ZP,				type = zp;
	LOADADDR: load = LOADADDR,			type = ro;
	EXEHDR:	  load = HEADER,			type = ro;
	STARTUP:  load = RAM1,				type = ro;
	LOWCODE:  load = RAM1,				type = ro,					optional = yes;
	INIT:	  load = RAM1,				type = ro,	define = yes,	optional = yes;
	CODE:	  load = RAM1,				type = ro;
	RODATA:	  load = RAM1,	run=RAM,	type = ro,	define = yes;
	DATA:	  load = RAM1,	run=RAM,	type = rw,	define = yes;
	ZPSAVE:	  load = RAM,				type = bss;
    ONCE:     load = RAM1,     type = ro,  define   = yes;
	BSS:	  load = RAM,				type = bss,	define = yes;
}
FEATURES {
	CONDES: segment = INIT,
		type	= constructor,
		label	= __CONSTRUCTOR_TABLE__,
		count	= __CONSTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type	= destructor,
		label	= __DESTRUCTOR_TABLE__,
		count	= __DESTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type	= interruptor,
		label	= __INTERRUPTOR_TABLE__,
		count	= __INTERRUPTOR_COUNT__;
}
